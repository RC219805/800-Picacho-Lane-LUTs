# file: .github/workflows/ci.yml
name: CI (lean)
permissions:
  contents: read

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install lean dev deps
        run: |
          python -m pip install --upgrade pip
          # Ensure pinned CI tools (mypy/pytest-cov/flake8/pylint) are present
          if [ -f requirements-ci.txt ]; then pip install -r requirements-ci.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install -e .

      - name: Show env
        run: |
          python -V
          pip list

      - name: Generate legacy shims from tests (fail if new shims are needed)
        run: python tools/gen_legacy_shims.py --fail-on-create

      - name: Sanity imports (fail early with context)
        run: |
          python - <<'PY'
          import importlib, sys
          try:
              importlib.import_module('src.evolutionary')
              importlib.import_module('evolutionary_checkpoint')
              print("✅ import sanity OK")
          except Exception as e:
              print(f"❌ Import sanity failed: {e}")
              sys.exit(2)
          PY

      # Optional mypy cache in lean CI for faster feedback
      - name: Restore MyPy cache
        uses: actions/cache/restore@v4
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'mypy.ini', 'setup.cfg', 'requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-mypy-${{ matrix.python-version }}-
            ${{ runner.os }}-mypy-

      - name: Type check (mypy) with logs
        run: |
          mypy --version | tee mypy.version.txt
          set -o pipefail
          mypy . 2>&1 | tee mypy.log
          test ${PIPESTATUS[0]} -eq 0

      - name: Save MyPy cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'mypy.ini', 'setup.cfg', 'requirements-ci.txt') }}

      - name: Upload MyPy logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-${{ matrix.python-version }}
          path: |
            mypy.log
            mypy.version.txt
          if-no-files-found: warn
          retention-days: 7

      - name: Run tests (with logs)
        run: |
          set -o pipefail
          pytest -v 2>&1 | tee pytest.log
          test ${PIPESTATUS[0]} -eq 0

      - name: Upload pytest log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ matrix.python-version }}
          path: pytest.log
          if-no-files-found: warn
          retention-days: 7

      - name: Verify metadata
        run: |
          python -m pip check || true
