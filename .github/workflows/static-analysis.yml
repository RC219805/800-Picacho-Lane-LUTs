# file: .github/workflows/static-analysis-and-tests.yml
name: Static Analysis & Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write   # for Codecov OIDC
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements-ci.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install pinned CI tools + project (lean)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install your CI pins (mypy, pytest-cov, flake8, pylint, etc.)
          pip install -r requirements-ci.txt
          # Optionally pull dev tools (black, isort, bandit, radon) if you keep them here
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Install project deps (lean extras)
          pip install -e ".[dev-lean]"

      - name: Generate legacy shims from tests (fail if new shims are needed)
        run: python tools/gen_legacy_shims.py --fail-on-create

      # ---------------- MyPy (restore → run → save) ----------------
      - name: Restore MyPy cache
        uses: actions/cache/restore@v4
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'mypy.ini', 'setup.cfg', 'requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-mypy-${{ matrix.python-version }}-
            ${{ runner.os }}-mypy-

      # Run style/lint only once (3.12) to avoid duplicate work
      - name: Run Black
        if: matrix.python-version == '3.12'
        run: black --check .

      - name: Run isort
        if: matrix.python-version == '3.12'
        run: isort --check-only .

      - name: Run Flake8 (errors-only)
        if: matrix.python-version == '3.12'
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Pylint
        if: matrix.python-version == '3.12'
        run: |
          git ls-files '*.py' | xargs pylint --fail-under=8.0 --logging-format-style=old

      - name: Run MyPy
        if: matrix.python-version == '3.12'
        run: |
          mypy --version
          mypy . --exclude '(01_Film_Emulation|02_Location_Aesthetic|03_Material_Response|venv)/'

      - name: Save MyPy cache
        if: always() && matrix.python-version == '3.12'
        uses: actions/cache/save@v4
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'mypy.ini', 'setup.cfg', 'requirements-ci.txt') }}

      # ---------------- Security & Complexity (once) ----------------
      - name: Run Bandit Security Scan
        if: matrix.python-version == '3.12'
        continue-on-error: true
        run: |
          bandit -r . -x tests/,01_Film_Emulation/,02_Location_Aesthetic/,03_Material_Response/ \
            -f json -o bandit-report.json

      - name: Upload Bandit report
        if: always() && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Check Code Complexity (radon)
        if: matrix.python-version == '3.12'
        continue-on-error: true
        run: |
          git ls-files '*.py' \
            | grep -Ev '^(01_Film_Emulation/|02_Location_Aesthetic/|03_Material_Response/|venv/)' \
            | xargs radon cc -s -nb | tee radon.txt

      - name: Upload radon report
        if: always() && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: radon-report
          path: radon.txt
          if-no-files-found: ignore
          retention-days: 7

      # ---------------- Tests (all Pythons) ----------------
      - name: Run Tests with Coverage
        run: pytest -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: ignore
          retention-days: 7

      # Upload coverage once (3.12)
      - name: Upload Coverage to Codecov (OIDC)
        if: always() && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
