# .github/workflows/summary.yml
name: Summarize new issues

on:
  issues:
    types: [opened]

permissions:
  issues: write  # least privilege; no repo read needed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}  # avoid duplicate comments
  cancel-in-progress: true

jobs:
  summarize:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'  # speed up installs

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir "openai>=1.43,<2"

      - name: Generate summary with OpenAI
        id: summarize
        continue-on-error: true  # don't fail the job; we'll handle fallback
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          RESPONSE_FILE: ${{ runner.temp }}/issue_summary.txt
          MODEL: gpt-4o-mini
        run: |
          python - <<'PY'
          import os, sys, textwrap, time

          def write(path: str, content: str) -> None:
              with open(path, "w", encoding="utf-8") as f:
                  f.write(content)

          resp_file = os.environ["RESPONSE_FILE"]
          title = (os.getenv("ISSUE_TITLE") or "").strip()
          body  = (os.getenv("ISSUE_BODY") or "").strip()

          # Skip gracefully if no key or nothing to summarize (prevents noisy fallbacks)
          if not os.getenv("OPENAI_API_KEY") or not (title or body):
              write(resp_file, "")
              with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as g:
                  g.write("has_summary=false\n")
              sys.exit(0)

          # Keep prompt small to reduce latency/cost
          body = body[:4000]

          from openai import OpenAI
          client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

          prompt = textwrap.dedent(f"""
          Summarize this GitHub issue in one concise, neutral paragraph (~120 words).
          Highlight problem, context, impact, and requested action (if any).
          Do not speculate; keep markdown minimal.

          Title: {title}

          Body:
          {body}
          """)

          summary = ""
          last_err = None

          # Simple exponential backoff for transient errors
          for wait in (1, 2, 4, 0):
              try:
                  completion = client.chat.completions.create(
                      model=os.getenv("MODEL", "gpt-4o-mini"),
                      messages=[{"role":"user","content":prompt}],
                      max_tokens=160,
                      temperature=0.2,
                  )
                  summary = (completion.choices[0].message.content or "").strip()
                  break
              except Exception as e:
                  last_err = e
                  if wait:
                      time.sleep(wait)

          write(resp_file, summary)

          # Write to step summary for quick visibility
          step_summary = os.getenv("GITHUB_STEP_SUMMARY")
          if step_summary:
              write(step_summary, summary or "No summary generated.")

          # Expose whether we actually produced a summary
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as g:
              g.write(f"has_summary={'true' if summary else 'false'}\n")

          # If we failed to call the API, surface the error in logs (kept non-fatal by continue-on-error)
          if not summary and last_err:
              print(f"OpenAI call failed: {last_err}", file=sys.stderr)
          PY

      - name: Post summary as comment (if any)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # gh prefers GH_TOKEN if present
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          RESPONSE_FILE: ${{ runner.temp }}/issue_summary.txt
        run: |
          if [ -s "$RESPONSE_FILE" ]; then
            gh issue comment "$ISSUE_NUMBER" --body-file "$RESPONSE_FILE"  # handles markdown/newlines safely
          else
            echo "No summary to post."
          fi

      - name: Fallback notice on failure or empty result
        if: ${{ steps.summarize.outcome != 'success' || steps.summarize.outputs.has_summary != 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          gh issue comment "$ISSUE_NUMBER" --body "⚠️ AI summarization was unavailable. Check workflow logs or configure OPENAI_API_KEY."