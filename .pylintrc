[MASTER]
# Use multiple processes to speed up Pylint
jobs=1

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# Ignore patterns for files/directories (regex patterns)
ignore-patterns=^\.#,
    __pycache__,
    \.git,
    \.github,
    .*\.pyc$,
    .*\.pyo$,
    .*\.so$,
    .*\.dll$,
    build,
    dist,
    \.tox,
    \.eggs,
    .*\.egg-info$,
    \.pytest_cache,
    node_modules

[MESSAGES CONTROL]
# Disable specific warnings that don't align with project philosophy or are too noisy
disable=
    # Import warnings - handled by flake8, many false positives in CI
    import-error,
    no-name-in-module,
    
    # Documentation - project uses selective documentation approach with Decision annotations
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    
    # Design checks - too restrictive for this codebase
    too-few-public-methods,
    too-many-instance-attributes,
    too-many-arguments,
    too-many-locals,
    too-many-branches,
    too-many-statements,
    too-many-public-methods,
    too-many-return-statements,
    too-many-lines,
    too-many-positional-arguments,
    
    # Naming conventions - project has specific conventions that differ from PEP8
    invalid-name,
    
    # Code similarity - intentional duplication in pipeline stages
    duplicate-code,
    
    # String formatting - mixed f-strings and format() is intentional
    consider-using-f-string,
    
    # Import style - project uses both styles contextually
    consider-using-from-import,
    
    # Boolean checks - explicit comparisons are clearer in some contexts
    use-implicit-booleaness-not-comparison,
    
    # Protected access - intentional for tight integrations
    protected-access,
    
    # Lambda usage - one-liners are acceptable
    unnecessary-lambda,
    
    # Dict literal - not always clearer
    use-dict-literal,
    
    # Fixme comments - tracked separately in issue tracker
    fixme,
    
    # Type checking - too many false positives with dynamic code
    no-member,
    
    # Test patterns - common in pytest fixtures and mocks
    redefined-outer-name,
    unused-argument

[FORMAT]
# Maximum number of characters on a single line (aligned with flake8 config)
max-line-length=127

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit (spaces, not tabs)
indent-string='    '

# Allow multi-line if/while statements (more readable for complex conditions)
single-line-if-stmt=no

# Allow multi-line class definitions
single-line-class-stmt=no

[BASIC]
# Good variable names which should always be accepted
good-names=i,j,k,ex,Run,_,x,y,z,ax,fig,gs,f,e,h,lr,df

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,40}$

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{0,40}$

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__)|([a-z_][a-z0-9_]*))$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{0,40}$

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{0,40}$

# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{0,40}|(__.*__))$

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,40}$

[DESIGN]
# Maximum number of arguments for function/method
max-args=10

# Maximum number of locals for function/method body
max-locals=25

# Maximum number of return statements in function/method body
max-returns=10

# Maximum number of branch for function/method body
max-branches=15

# Maximum number of statements in function/method body
max-statements=60

# Maximum number of attributes for a class
max-attributes=15

# Minimum number of public methods for a class
min-public-methods=1

# Maximum number of public methods for a class
max-public-methods=25

[TYPECHECK]
# List of module names for which member attributes should not be checked
ignored-modules=numpy,torch,PIL,cv2,scipy

# List of classes names for which member attributes should not be checked
ignored-classes=optparse.Values,thread._local,_thread._local,numpy,torch,PIL,scipy

[IMPORTS]
# Allow wildcard imports (project uses them intentionally with Decision annotations)
allow-wildcard-with-all=yes

[EXCEPTIONS]
# Modules that can raise exceptions without explicit "from" clause
overgeneral-exceptions=builtins.BaseException,builtins.Exception

[REPORTS]
# Set the output format
output-format=text

# Activate the evaluation score
score=yes

# Set minimum acceptable score (0-10). CI will pass if score >= this value
# Currently at 9.62/10, setting to 9.0 to allow minor style issues
fail-under=9.0

# Template used to display messages
msg-template={path}:{line}:{column}: {msg_id}: {msg} ({symbol})

[SIMILARITIES]
# Minimum lines number of a similarity
min-similarity-lines=10

# Ignore comments when computing similarities
ignore-comments=yes

# Ignore docstrings when computing similarities
ignore-docstrings=yes

# Ignore imports when computing similarities
ignore-imports=yes

[VARIABLES]
# Tells whether we should check for unused import in __init__ files
init-import=no

# List of additional names supposed to be defined in builtins
additional-builtins=

# List of strings which can identify a callback function by name
callbacks=cb_,_cb

[LOGGING]
# Format style used to check logging format string
logging-format-style=new

[SPELLING]
# Spelling dictionary name (requires pyenchant)
spelling-dict=

# List of comma separated words that should not be checked
spelling-ignore-words=

# A path to a file that contains private dictionary
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary
spelling-store-unknown-words=no

[STRING]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module
check-quote-consistency=no

# This flag controls whether the implicit-str-concat should generate a warning on
# implicit string concatenation in sequences defined over several lines
check-str-concat-over-line-jumps=no
